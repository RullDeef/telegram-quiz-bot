// Code generated by MockGen. DO NOT EDIT.
// Source: ./model/statistics_service.go

// Package mock_model is a generated GoMock package.
package mock_model

import (
	reflect "reflect"
	time "time"

	model "github.com/RullDeef/telegram-quiz-bot/model"
	gomock "github.com/golang/mock/gomock"
)

// MockStatisticsService is a mock of StatisticsService interface.
type MockStatisticsService struct {
	ctrl     *gomock.Controller
	recorder *MockStatisticsServiceMockRecorder
}

// MockStatisticsServiceMockRecorder is the mock recorder for MockStatisticsService.
type MockStatisticsServiceMockRecorder struct {
	mock *MockStatisticsService
}

// NewMockStatisticsService creates a new mock instance.
func NewMockStatisticsService(ctrl *gomock.Controller) *MockStatisticsService {
	mock := &MockStatisticsService{ctrl: ctrl}
	mock.recorder = &MockStatisticsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatisticsService) EXPECT() *MockStatisticsServiceMockRecorder {
	return m.recorder
}

// CreateStatistics mocks base method.
func (m *MockStatisticsService) CreateStatistics(user model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStatistics", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateStatistics indicates an expected call of CreateStatistics.
func (mr *MockStatisticsServiceMockRecorder) CreateStatistics(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStatistics", reflect.TypeOf((*MockStatisticsService)(nil).CreateStatistics), user)
}

// GetStatistics mocks base method.
func (m *MockStatisticsService) GetStatistics(user model.User) (model.Statistics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatistics", user)
	ret0, _ := ret[0].(model.Statistics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatistics indicates an expected call of GetStatistics.
func (mr *MockStatisticsServiceMockRecorder) GetStatistics(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatistics", reflect.TypeOf((*MockStatisticsService)(nil).GetStatistics), user)
}

// ResetStatistics mocks base method.
func (m *MockStatisticsService) ResetStatistics(user model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetStatistics", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetStatistics indicates an expected call of ResetStatistics.
func (mr *MockStatisticsServiceMockRecorder) ResetStatistics(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetStatistics", reflect.TypeOf((*MockStatisticsService)(nil).ResetStatistics), user)
}

// SubmitAnswer mocks base method.
func (m *MockStatisticsService) SubmitAnswer(user model.User, isCorrect bool, answerTime time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitAnswer", user, isCorrect, answerTime)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubmitAnswer indicates an expected call of SubmitAnswer.
func (mr *MockStatisticsServiceMockRecorder) SubmitAnswer(user, isCorrect, answerTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitAnswer", reflect.TypeOf((*MockStatisticsService)(nil).SubmitAnswer), user, isCorrect, answerTime)
}

// SubmitQuizComplete mocks base method.
func (m *MockStatisticsService) SubmitQuizComplete(user model.User, totalQuizTime time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitQuizComplete", user, totalQuizTime)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubmitQuizComplete indicates an expected call of SubmitQuizComplete.
func (mr *MockStatisticsServiceMockRecorder) SubmitQuizComplete(user, totalQuizTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitQuizComplete", reflect.TypeOf((*MockStatisticsService)(nil).SubmitQuizComplete), user, totalQuizTime)
}
