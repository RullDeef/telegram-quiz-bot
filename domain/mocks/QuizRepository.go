// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/RullDeef/telegram-quiz-bot/domain"
	mock "github.com/stretchr/testify/mock"
)

// QuizRepository is an autogenerated mock type for the QuizRepository type
type QuizRepository struct {
	mock.Mock
}

// GetById provides a mock function with given fields: ctx, id
func (_m *QuizRepository) GetById(ctx context.Context, id int64) (domain.Quiz, error) {
	ret := _m.Called(ctx, id)

	var r0 domain.Quiz
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (domain.Quiz, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) domain.Quiz); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.Quiz)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewQuizRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewQuizRepository creates a new instance of QuizRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewQuizRepository(t mockConstructorTestingTNewQuizRepository) *QuizRepository {
	mock := &QuizRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
